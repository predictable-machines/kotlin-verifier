FILE fqName:foo.bar fileName:/simple.kt
  FUN name:box visibility:public modality:FINAL <> () returnType:kotlin.String
    BLOCK_BODY
      VAR name:x type:kotlin.Int [val]
        CONST Int type=kotlin.Int value=42
      VAR name:y type:kotlin.Int [val]
        CONST Int type=kotlin.Int value=58
      VAR name:sum type:kotlin.Int [val]
        CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=PLUS
          $this: GET_VAR 'val x: kotlin.Int declared in foo.bar.box' type=kotlin.Int origin=null
          other: GET_VAR 'val y: kotlin.Int declared in foo.bar.box' type=kotlin.Int origin=null
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in foo.bar'
        WHEN type=kotlin.String origin=IF
          BRANCH
            if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'val sum: kotlin.Int declared in foo.bar.box' type=kotlin.Int origin=null
              arg1: CONST Int type=kotlin.Int value=100
            then: BLOCK type=kotlin.String origin=null
              CONST String type=kotlin.String value="OK"
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: BLOCK type=kotlin.String origin=null
              STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value="Fail: "
                GET_VAR 'val sum: kotlin.Int declared in foo.bar.box' type=kotlin.Int origin=null
